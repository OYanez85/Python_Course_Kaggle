1.

# Import the jimmy_slots submodule
from learntools.python import jimmy_slots
# Call the get_graph() function to get Jimmy's graph
graph = jimmy_slots.get_graph()
graph

1.Solution:a.
def prettify_graph(graph):
    graph.set_title("Results of 500 slot machine pulls")
    # Make the y-axis begin at 0
    graph.set_ylim(bottom=0)
    # Label the y-axis
    graph.set_ylabel("Balance")
    # Bonus: format the numbers on the y-axis as dollar amounts
    # An array of the values displayed on the y-axis (150, 175, 200, etc.)
    ticks = graph.get_yticks()
    # Format those values into strings beginning with dollar sign
    new_labels = ['${}'.format(int(amt)) for amt in ticks]
    # Set the new labels
    graph.set_yticklabels(new_labels)

1.Solution:b. 
def prettify_graph(graph):
    """Modify the given graph according to Jimmy's requests: add a title, make the y-axis
    start at 0, label the y-axis. (And, if you're feeling ambitious, format the tick marks
    as dollar amounts using the "$" symbol.)
    """
    graph.set_title("Results of 500 slot machine pulls")
    # Set the starting point of y-axis to 0
    graph.set_ylim(bottom=0)

    # Label the y-axis as "Balance"
    graph.set_ylabel("Balance")

graph = jimmy_slots.get_graph()
prettify_graph(graph)
graph

2.
there is n error in the following code:
def best_items(racers):
    """Given a list of racer dictionaries, return a dictionary mapping items to the number
    of times those items were picked up by racers who finished in first place.
    """
    winner_item_counts = {}
    for i in range(len(racers)):
        # The i'th racer dictionary
        racer = racers[i]
        # We're only interested in racers who finished in first
        if racer['finish'] == 1:
            for i in racer['items']:
                # Add one to the count for this item (adding it to the dict if necessary)
                if i not in winner_item_counts:
                    winner_item_counts[i] = 0
                winner_item_counts[i] += 1

        # Data quality issues :/ Print a warning about racers with no name set. We'll take care of it later.
        if racer['name'] is None:
            print("WARNING: Encountered racer with unknown name on iteration {}/{} (racer = {})".format(
                i+1, len(racers), racer['name'])
                 )
    return winner_item_counts

#### Solution: Luigi used the variable name i to represent each item in racer['items']. 
#However, he also used i as the loop variable for the outer loop (for i in range(len(racers))). 
#These i's are clobbering each other. This becomes a problem only if we encounter a racer with a finish of 1 and a name of None. 
#If that happens, when we try to print the "WARNING" message, i refers to a string like "green shell", which python can't add to an integer, hence a TypeError.
#This is similar to the issue we saw when we imported * from math and numpy. 
#They both contained variables called log, and the one we got when we tried to call it was the wrong one.
#We can fix this by using different loop variables for the inner and outer loops. 
#i wasn't a very good variable name for the inner loop anyways. 
#for item in racer['items'] fixes the bug and is easier to read.
#Variable shadowing bugs like this don't come up super often, but when they do they can take an infuriating amount of time to diagnose!

Code solution: 
def best_items(racers):
    winner_item_counts = {}
    for i in range(len(racers)):
        racer = racers[i]
        if racer['finish'] == 1:
            for item in racer['items']:  # Use 'item' instead of 'i'
                if item not in winner_item_counts:
                    winner_item_counts[item] = 0
                winner_item_counts[item] += 1
        if racer['name'] is None:
            print(f"WARNING: Encountered racer with unknown name on iteration {i+1}/{len(racers)}")
    return winner_item_counts

3. 
def blackjack_hand_greater_than(hand_1, hand_2):
    """
    Return True if hand_1 beats hand_2, and False otherwise.
    
    In order for hand_1 to beat hand_2 the following must be true:
    - The total of hand_1 must not exceed 21
    - The total of hand_1 must exceed the total of hand_2 OR hand_2's total must exceed 21
    
    Hands are represented as a list of cards. Each card is represented by a string.
    
    When adding up a hand's total, cards with numbers count for that many points. Face
    cards ('J', 'Q', and 'K') are worth 10 points. 'A' can count for 1 or 11.
    
    When determining a hand's total, you should try to count aces in the way that 
    maximizes the hand's total without going over 21. e.g. the total of ['A', 'A', '9'] is 21,
    the total of ['A', 'A', '9', '3'] is 14.
    
    Examples:
    >>> blackjack_hand_greater_than(['K'], ['3', '4'])
    True
    >>> blackjack_hand_greater_than(['K'], ['10'])
    False
    >>> blackjack_hand_greater_than(['K', 'K', '2'], ['3'])
    False
    """
def hand_value(hand):
    """Calculate the value of a blackjack hand."""
    values = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 10, 'Q': 10, 'K': 10, 'A': 1}
    result = 0
    aces = 0
    for card in hand:
        if card == 'A':
            aces += 1
        else:
            result += values[card]
    for _ in range(aces):
        if result + 11 <= 21:
            result += 11
        else:
            result += 1
    return result

def blackjack_hand_greater_than(hand_1, hand_2):
    total_1 = hand_value(hand_1)
    total_2 = hand_value(hand_2)
    return (total_1 <= 21 and total_1 > total_2) or (total_2 > 21 and total_1 <= 21)


# Check your answer
q3.check()
