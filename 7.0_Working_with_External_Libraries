#### Working with External Libraries
-----------------
import math

print("It's math! It has type {}".format(type(math)))
------------------
print(dir(math))
-----------------
print("pi to 4 significant digits = {:.4}".format(math.pi))
----------------
math.log(32, 2)
----------------
help(math.log)
--------------
help(math)
----------------
### Other import syntax
---------------
import math as mt
mt.pi
----------------
import math
mt = math
---------------
#import * makes all the module's variables directly accessible to you (without any dotted prefix).
from math import *
print(pi, log(32, 2))
---------------
# These kinds of "star imports" can occasionally lead to weird, difficult-to-debug situations.
from math import *
from numpy import *
print(pi, log(32, 2))
-----------------
# A good compromise is to import only the specific things we'll need from each module:
from math import log, pi
from numpy import asarray
-----------------
### Submodules
# We've seen that modules contain variables which can refer to functions or values. 
# Something to be aware of is that they can also have variables referring to other modules.

import numpy
print("numpy.random is a", type(numpy.random))
print("it contains names such as...",
      dir(numpy.random)[-15:]
     )
--------------
# Roll 10 dice
rolls = numpy.random.randint(low=1, high=6, size=10)
rolls
----------------
### Oh the places you'll go, oh the objects you'll see
## Three tools for understanding strange objects
----------------
#1: type() (what is this thing?)
type(rolls)
----------------
# 2: dir() (what can I do with it?)
print(dir(rolls))

# If I want the average roll, the "mean" method looks promising...
rolls.mean()

# Or maybe I just want to turn the array into a list, in which case I can use "tolist"
rolls.tolist()
---------------------
3: help() (tell me more)
# That "ravel" attribute sounds interesting. I'm a big classical music fan.
help(rolls.ravel)

# Okay, just tell me everything there is to know about numpy.ndarray
# (Click the "output" button to see the novel-length output)
help(rolls)
------------
### Operator overloading

rolls + 10
----------------
# At which indices are the dice less than or equal to 3?
rolls <= 3
----------------
xlist = [[1,2,3],[2,4,6],]
# Create a 2-dimensional array
x = numpy.asarray(xlist)
print("xlist = {}\nx =\n{}".format(xlist, x))
--------------------------
# Get the last element of the second row of our numpy array
x[1,-1]
---------------------
### When does 1 + 1 not equal 2?

import tensorflow as tf
# Create two constants, each with value 1
a = tf.constant(1)
b = tf.constant(1)
# Add them together to get...
a + b
-----------------------
# Get the rows with population over 1m in South America
df[(df['population'] > 10**6) & (df['continent'] == 'South America')]
---------------------
print(dir(list))
---------------------
