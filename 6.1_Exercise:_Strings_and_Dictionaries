0a.

a = ""
length = len(a)
print(length)
q0.a.check()

0b.

b = "it's ok"
length = len(b)
print(length)
q0.b.check()

0c.

c = 'it\'s ok'
length = len(c)
print(length)
q0.c.check()

0d.

d = """hey"""
length = len(d)
print(length)
q0.d.check()

0e.

e = '\n'
length = len(e)
print(length)
q0.e.check()

1. 

def is_valid_zip(zip_code):
    """Returns whether the input string is a valid (5 digit) zip code
    """
    # Check if the length is 5 and all characters are digits
    return len(zip_code) == 5 and zip_code.isdigit()
    # if len(zip_code) == 5:
        # print(zip_code.isdigit())  # Output: True
# help(str.isdigit)
# Check your answer
q1.check()

2.

def word_search(doc_list, keyword):
    # list to hold the indices of matching documents
    indices = [] 
    # Iterate through the indices (i) and elements (doc) of documents
    for i, doc in enumerate(doc_list):
        # Split the string doc into a list of words (according to whitespace)
        tokens = doc.split()
        # Make a transformed list where we 'normalize' each word to facilitate matching.
        # Periods and commas are removed from the end of each word, and it's set to all lowercase.
        normalized = [token.rstrip('.,').lower() for token in tokens]
        # Is there a match? If so, update the list of matching indices.
        if keyword.lower() in normalized:
            indices.append(i)
    return indices

3.

def multi_word_search(doc_list, keywords):
    """
    Takes a list of documents (each document is a string) and a list of keywords.
    Returns a dictionary where each key is a keyword, and the value is a list of index
    values into the original list for all documents containing that keyword.

    Example:
    doc_list = ["The Learn Python Challenge Casino.", "They bought a car, and then went to the casino.", "Casinoville?"]
    keywords = ['casino', 'car']
    >>> multi_word_search(doc_list, keywords)
    >>> {'casino': [0, 1], 'car': [1]}
    """
    # Initialize a dictionary to hold the results
    keyword_indices = {keyword: [] for keyword in keywords}
    
    # Iterate over each document
    for i, doc in enumerate(doc_list):
        # Standardize the document string to lowercase and replace punctuation
        standardized_doc = doc.lower().replace('.', '').replace(',', '')
        
        # Check each keyword in the standardized document
        for keyword in keywords:
            # Split the document into words to ensure whole word matching
            if keyword.lower() in standardized_doc.split():
                keyword_indices[keyword].append(i)
    
    return keyword_indices

